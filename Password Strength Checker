import re

class PasswordStrengthChecker:
    def __init__(self, password):
        self.password = password
        self.length = len(password)
        self.complexity_score = 0
        self.unique_chars_score = 0
        self.feedback = []

    def check_length(self):
        if self.length >= 12:
            self.complexity_score += 2
            self.feedback.append("Good length (12+ characters).")
        elif self.length >= 8:
            self.complexity_score += 1
            self.feedback.append("Acceptable length (8-11 characters).")
        else:
            self.feedback.append("Password is too short. Use at least 8 characters.")

    def check_complexity(self):
        has_lower = re.search(r'[a-z]', self.password) is not None
        has_upper = re.search(r'[A-Z]', self.password) is not None
        has_digit = re.search(r'[0-9]', self.password) is not None
        has_special = re.search(r'[\W_]', self.password) is not None

        if has_lower:
            self.complexity_score += 1
        else:
            self.feedback.append("Add lowercase letters for better security.")
        
        if has_upper:
            self.complexity_score += 1
        else:
            self.feedback.append("Add uppercase letters for better security.")
        
        if has_digit:
            self.complexity_score += 1
        else:
            self.feedback.append("Add numbers for better security.")
        
        if has_special:
            self.complexity_score += 1
        else:
            self.feedback.append("Add special characters for better security.")

    def check_uniqueness(self):
        unique_chars = set(self.password)
        if len(unique_chars) > self.length // 2:
            self.unique_chars_score = 2
            self.feedback.append("Good use of unique characters.")
        else:
            self.unique_chars_score = 1
            self.feedback.append("Increase character variety for better uniqueness.")

    def assess_strength(self):
        self.check_length()
        self.check_complexity()
        self.check_uniqueness()

        total_score = self.complexity_score + self.unique_chars_score

        if total_score >= 7:
            strength = "Strong"
        elif total_score >= 5:
            strength = "Moderate"
        else:
            strength = "Weak"

        return {"password_strength": strength, "feedback": self.feedback}

password = input("Enter your password: ")
checker = PasswordStrengthChecker(password)
result = checker.assess_strength()

print(f"Password Strength: {result['password_strength']}")
print("Feedback:")
for feedback in result['feedback']:
    print(f"- {feedback}")
